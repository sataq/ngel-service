description = """NGEL Station Service"""

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'com.github.ben-manes.versions'

allprojects {
    group = 'org.ngel'
    version = '0.0.1'

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "http://repo.spring.io/libs-snapshot-local"
        }
        maven {
            url "http://repo.spring.io/libs-milestone-local"
        }
        maven {
            url "http://repo.spring.io/libs-release-local"
        }
        maven {
            url "http://repo.spring.io/libs-release-remote"
        }
    }

    buildscript {
        ext {
            springVersion = "4.3.8.RELEASE"
            springCloudStarterParentVersion = "Camden.SR6"
            springHATEOASVersion = "0.23.0.RELEASE"
            springCloudVersion = '1.0.3.RELEASE'
            jacksonVersion = "2.8.4"
            commonsLangVersion = "3.4"
            commonsCollectionsVersion = "4.1"
            slf4jVersion = "1.7.13"
            lombokVersion = "1.16.16"
            mockitoVersion = "1.10.19"
            jUnitVersion = "4.12"
            hamcrestVersion = "1.3"
            findBugsVersion = "3.0.1"
            springPluginCoreVersion = "1.2.0.RELEASE"
            flywayVersion = "4.2.0"
            h2Version = "1.4.193"
            mySQLConnectorVersion = "6.0.5"

            if (project.hasProperty('buildNumber')) {
                project.version += ".${buildNumber}"
            } else {
                def date = new Date()
                def formattedDate = date.format('yyyyMMddHHmmss')
                project.version += ".${formattedDate}"
            }
        }

        repositories {
            mavenCentral()
        }
    }
}

project.ext.set("checkstyleDir", "$projectDir/config/checkstyle")
project.ext.set("checkstyleConfig", new File(checkstyleDir, "checkstyle.xml"))

buildscript {
    ext {
        gradleVersionsPluginVersion = "0.10.1"
        gradleSonarQubePluginVersion = "1.1"
        dependencyManagementPluginVersion = "0.6.1.RELEASE"
        springBootVersion = "1.5.3.RELEASE"
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:${gradleVersionsPluginVersion}"
        classpath "org.sonarqube.gradle:gradle-sonarqube-plugin:${gradleSonarQubePluginVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.3'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile "org.apache.commons:commons-lang3:${commonsLangVersion}"
        compile "org.apache.commons:commons-collections4:${commonsCollectionsVersion}"
        compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
        compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonVersion}"
        compile "org.slf4j:slf4j-api:${slf4jVersion}"

        compile "mysql:mysql-connector-java:${mySQLConnectorVersion}"
        compile "org.hibernate:hibernate-core:5.2.12.Final"
        compile "org.hibernate:hibernate-entitymanager:5.2.12.Final"
        compile "org.hibernate.validator:hibernate-validator:6.0.7.Final"
        compile "javax.validation:validation-api:2.0.1.Final"

        // Spring dependencies. Needed to avoid fallbacks to older versions.
        compile "org.springframework:spring-context:${springVersion}"
        compile "org.springframework:spring-web:${springVersion}"
        compile "org.springframework:spring-core:${springVersion}"
        compile "org.springframework:spring-beans:${springVersion}"
        compile "org.springframework:spring-tx:${springVersion}"
        compile "org.springframework:spring-aop:${springVersion}"
        compile "org.springframework:spring-expression:${springVersion}"

        compile "org.springframework.hateoas:spring-hateoas:${springHATEOASVersion}"

        // Spring Boot dependencies. Need to avoid fallbacks to older versions.
        compile "org.springframework.boot:spring-boot:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-actuator:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-logging:${springBootVersion}"

        compile "org.flywaydb:flyway-core:${flywayVersion}"

        testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
            exclude(module: "spring-boot")
            exclude(module: "spring-boot-autoconfigure")
        }

        testCompile "junit:junit:${jUnitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
    }

    dependencyManagement {
        applyMavenExclusions false
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentVersion}"
        }
    }

    sourceSets {
        jar {
            exclude "**/data/**"
        }

        intTest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }

    configurations {
        intTestCompile.extendsFrom testCompile
        intTestRuntime.extendsFrom testRuntime
    }

    task intTest(type: Test) {
        description = "Execute the integration test suite"
        systemProperties = System.getProperties()
        testClassesDir = sourceSets.intTest.output.classesDir
        classpath = sourceSets.intTest.runtimeClasspath
        systemProperties['user.dir'] = workingDir
    }
    check.dependsOn intTest

    checkstyle {
        toolVersion = "6.0"
        configFile = checkstyleConfig
        configProperties.checkstyleConfigDir = checkstyleDir
        configProperties['checkstyle.suppressions.file'] = "${checkstyleDir}/suppressions.xml"
        configProperties['checkstyle.cache.file'] = 'build/cachefile'
        configProperties['checkstyle.linelength.severity'] = 'ignore'
        configProperties['checkstyle.finalparameters.severity'] = 'ignore'
        configProperties['checkstyle.designforextention.severity'] = 'ignore'
        configProperties['checkstyle.javapackage.severity'] = 'ignore'
        configProperties['checkstyle.importorder.severity'] = 'ignore'
        configProperties['checkstyle.importorder.default'] = 'java,javax,com,org,net'
    }

    // Configure jacoco test report
    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
            html.destination "${buildDir}/jacocoHtml"
        }
        group = "Reporting"
        description = "Generate Jacoco coverage reports after running tests."
        classDirectories = fileTree(dir: 'build/classes/main', include: 'com/**')
        sourceDirectories = fileTree(dir: 'src/main/java', include: 'com/**')
    }

    test {
        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
            classDumpFile = file("$buildDir/jacoco/classpathdumps")
        }
    }

    checkstyleMain {
        classpath += configurations.compile
    }

    checkstyleTest {
        classpath += configurations.testCompile
    }

    findbugs {
        effort = "max"
        reportLevel = "low"
        sourceSets = [sourceSets.main]
        toolVersion = "${findBugsVersion}"
    }

    tasks.withType(FindBugs) {
        group = "Reporting"
        reports {
            xml.enabled = false
            html.enabled = true
            html.destination "${buildDir}/findbugsHtml"
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                //version "1.1.$buildNumber"
                from components.java

                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }
}

task wrapper(type: Wrapper, group: 'Build Setup') {
    gradleVersion = '3.3'
}
